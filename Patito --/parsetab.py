
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COLON COMA CTE_C CTE_F CTE_I CTE_STRING DIV DO ELSE EQUAL EQUALX2 EXCLAMATION FLOAT FROM FUNCION GREATEREQUALTHAN GREATERTHAN ID IF INT LESSEQUALTHAN LESSTHAN L_BRACKET L_KEY L_PARENT MAIN MINUS MONEY MULT OR PLUS PRINT PROGRAM QUESTION READ RETURN R_BRACKET R_KEY R_PARENT SEMICOLON SO TO VAR VOID WHILE WRITE\n    program : PROGRAM ID COLON auxVar auxFuncion MAIN bloque\n    \n    auxVar : var auxVar \n            | empty\n    \n    var : VAR tipo COLON lista_ids auxLista_idsVar SEMICOLON\n    \n    tipo : INT\n        | FLOAT\n        | CHAR\n    \n    auxLista_idsVar : COMA lista_ids auxLista_idsVar\n            | empty  \n    \n    lista_ids : ID casilla casilla \n    \n    casilla : L_BRACKET casillaVar R_BRACKET\n            | empty\n    \n    casillaVar : CTE_I\n                | ID\n                | exp\n    \n    auxFuncion : funcion auxFuncion\n            | empty\n    \n    funcion : FUNCION tipoFuncion ID L_PARENT auxParametro R_PARENT COLON auxVar bloque\n            | empty\n    \n    tipoFuncion : tipo\n                | VOID\n    \n    auxParametro : tipo ID\n                | tipo ID COMA auxParametro\n                | empty\n    \n    bloque : L_KEY auxEstatuto R_KEY\n    \n    auxEstatuto : estatuto auxEstatuto\n                | empty\n    \n    estatuto : asignacion\n            | llamada SEMICOLON\n            | retorno\n            | lectura\n            | escritura\n            | decision\n            | repeticion\n    \n    asignacion : lista_ids EQUAL exp SEMICOLON\n    \n    exp : t auxExp\n    \n    auxExp : PLUS exp\n            | MINUS exp\n            | empty\n    \n    t : f auxT\n    \n    auxT : MULT t\n        | DIV t\n        | MONEY t\n        | EXCLAMATION t\n        | QUESTION t\n        | empty\n    \n    f : m auxF\n    \n    auxF : LESSTHAN f\n        | GREATERTHAN f\n        | LESSEQUALTHAN f\n        | GREATEREQUALTHAN f\n        | EQUALX2 f\n        | empty\n    \n    m : x auxM\n    \n    auxM : OR m\n        | empty\n    \n    x : z auxX\n    \n    auxX : AND z\n        | empty\n    \n    z : var_cte\n        | L_PARENT exp R_PARENT\n        | lista_ids\n        | llamada\n        | empty\n    \n    var_cte : ID\n            | CTE_I\n            | CTE_F\n    \n    llamada : ID L_PARENT auxLlamada R_PARENT\n    \n    auxLlamada : exp\n                | exp COMA auxLlamada\n    \n    retorno : RETURN L_PARENT exp R_PARENT SEMICOLON\n    \n    lectura : READ L_PARENT auxLectura R_PARENT SEMICOLON\n    \n    auxLectura : lista_ids\n            | lista_ids COMA auxLectura\n    \n    escritura : WRITE L_PARENT auxEscritura R_PARENT SEMICOLON\n    \n    auxEscritura : auxString \n                 | auxExpEscritura\n    \n    auxString : CTE_STRING\n              | CTE_STRING COMA auxEscritura  \n    \n    auxExpEscritura : exp\n                    | exp COMA auxExpEscritura\n    \n    decision : IF L_PARENT exp R_PARENT SO bloque auxDecision\n    \n    auxDecision : ELSE bloque\n                | empty\n    \n    repeticion : condicional\n                | nocondicional\n    \n    condicional : WHILE L_PARENT exp R_PARENT DO bloque\n    \n    nocondicional : FROM lista_ids EQUAL exp TO exp DO bloque\n     \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,24,56,],[0,-1,-25,]),'ID':([2,15,16,17,20,21,22,23,25,30,32,34,35,36,37,38,45,46,48,51,54,56,58,59,60,61,62,63,64,65,68,83,103,109,110,113,114,115,116,117,120,121,122,123,124,127,130,133,135,138,140,141,163,164,166,171,174,175,178,180,182,183,],[3,-5,-6,-7,26,-20,-21,28,40,40,-28,-30,-31,-32,-33,-34,-85,-86,28,28,75,-25,-29,89,89,89,28,89,89,89,105,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-35,89,28,89,89,-71,-72,-75,89,-89,-87,-82,-84,-83,-88,]),'COLON':([3,14,15,16,17,104,],[4,23,-5,-6,-7,145,]),'VAR':([4,6,70,145,],[8,8,-4,8,]),'FUNCION':([4,5,6,7,10,11,13,56,70,177,],[-89,12,-89,-3,12,-19,-2,-25,-4,-18,]),'MAIN':([4,5,6,7,9,10,11,13,19,56,70,177,],[-89,-89,-89,-3,18,-89,-17,-2,-16,-25,-4,-18,]),'L_KEY':([6,7,13,18,70,145,169,170,172,179,181,],[-89,-3,-2,25,-4,-89,25,25,25,25,25,]),'INT':([8,12,49,146,],[15,15,15,15,]),'FLOAT':([8,12,49,146,],[16,16,16,16,]),'CHAR':([8,12,49,146,],[17,17,17,17,]),'VOID':([12,],[22,]),'R_KEY':([25,29,30,31,32,34,35,36,37,38,45,46,56,57,58,133,163,164,166,174,175,178,180,182,183,],[-89,56,-89,-27,-28,-30,-31,-32,-33,-34,-85,-86,-25,-26,-29,-35,-71,-72,-75,-89,-87,-82,-84,-83,-88,]),'RETURN':([25,30,32,34,35,36,37,38,45,46,56,58,133,163,164,166,174,175,178,180,182,183,],[41,41,-28,-30,-31,-32,-33,-34,-85,-86,-25,-29,-35,-71,-72,-75,-89,-87,-82,-84,-83,-88,]),'READ':([25,30,32,34,35,36,37,38,45,46,56,58,133,163,164,166,174,175,178,180,182,183,],[42,42,-28,-30,-31,-32,-33,-34,-85,-86,-25,-29,-35,-71,-72,-75,-89,-87,-82,-84,-83,-88,]),'WRITE':([25,30,32,34,35,36,37,38,45,46,56,58,133,163,164,166,174,175,178,180,182,183,],[43,43,-28,-30,-31,-32,-33,-34,-85,-86,-25,-29,-35,-71,-72,-75,-89,-87,-82,-84,-83,-88,]),'IF':([25,30,32,34,35,36,37,38,45,46,56,58,133,163,164,166,174,175,178,180,182,183,],[44,44,-28,-30,-31,-32,-33,-34,-85,-86,-25,-29,-35,-71,-72,-75,-89,-87,-82,-84,-83,-88,]),'WHILE':([25,30,32,34,35,36,37,38,45,46,56,58,133,163,164,166,174,175,178,180,182,183,],[47,47,-28,-30,-31,-32,-33,-34,-85,-86,-25,-29,-35,-71,-72,-75,-89,-87,-82,-84,-83,-88,]),'FROM':([25,30,32,34,35,36,37,38,45,46,56,58,133,163,164,166,174,175,178,180,182,183,],[48,48,-28,-30,-31,-32,-33,-34,-85,-86,-25,-29,-35,-71,-72,-75,-89,-87,-82,-84,-83,-88,]),'L_PARENT':([26,40,41,42,43,44,47,54,59,60,61,63,64,65,75,83,89,103,109,110,113,114,115,116,117,120,121,122,123,124,127,130,135,140,141,171,],[49,60,61,62,63,64,65,83,83,83,83,83,83,83,60,83,60,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'COMA':([27,28,53,55,60,63,71,72,77,78,79,80,81,82,84,85,86,87,89,90,92,95,99,100,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,140,141,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,],[51,-89,-89,-12,-89,-89,51,-10,-89,-89,-89,-89,-89,-60,-62,-63,-64,-67,-65,-66,135,138,140,141,146,-11,-36,-89,-89,-39,-40,-89,-89,-89,-89,-89,-46,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-37,-38,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-55,-58,-61,]),'SEMICOLON':([27,28,33,50,52,53,55,59,71,72,77,78,79,80,81,82,84,85,86,87,88,89,90,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,136,137,139,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,],[-89,-89,58,70,-9,-89,-12,-89,-89,-10,-89,-89,-89,-89,-89,-60,-62,-63,-64,-67,133,-65,-66,-8,-11,-36,-89,-89,-39,-40,-89,-89,-89,-89,-89,-46,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,-68,163,164,166,-37,-38,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-55,-58,-61,]),'L_BRACKET':([28,40,53,55,75,89,107,],[54,54,54,-12,54,54,-11,]),'EQUAL':([28,39,40,53,55,66,72,107,],[-89,59,-89,-89,-12,103,-10,-11,]),'R_PARENT':([28,49,53,55,60,61,63,64,65,67,69,72,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,140,141,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,165,167,168,173,],[-89,-89,-89,-12,-89,-89,-89,-89,-89,104,-24,-10,-89,-89,-89,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,134,-69,136,137,-73,139,-76,-77,-78,-80,142,143,-22,-11,-36,-89,-89,-39,-40,-89,-89,-89,-89,-89,-46,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,161,-68,-89,-89,-89,-89,-37,-38,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-55,-58,-61,-70,-74,-79,-81,-23,]),'AND':([53,54,55,59,60,61,63,64,65,72,74,75,81,82,83,84,85,86,87,89,90,103,107,109,110,113,114,115,116,117,120,121,122,123,124,127,134,135,140,141,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,130,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-68,-89,-89,-89,-61,-89,]),'OR':([53,54,55,59,60,61,63,64,65,72,74,75,80,81,82,83,84,85,86,87,89,90,103,107,109,110,113,114,115,116,117,120,121,122,123,124,127,129,130,131,134,135,140,141,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,127,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-57,-89,-59,-68,-89,-89,-89,-58,-61,-89,]),'LESSTHAN':([53,54,55,59,60,61,63,64,65,72,74,75,79,80,81,82,83,84,85,86,87,89,90,103,107,109,110,113,114,115,116,117,120,121,122,123,124,126,127,128,129,130,131,134,135,140,141,159,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,120,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-55,-58,-61,-89,]),'GREATERTHAN':([53,54,55,59,60,61,63,64,65,72,74,75,79,80,81,82,83,84,85,86,87,89,90,103,107,109,110,113,114,115,116,117,120,121,122,123,124,126,127,128,129,130,131,134,135,140,141,159,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,121,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-55,-58,-61,-89,]),'LESSEQUALTHAN':([53,54,55,59,60,61,63,64,65,72,74,75,79,80,81,82,83,84,85,86,87,89,90,103,107,109,110,113,114,115,116,117,120,121,122,123,124,126,127,128,129,130,131,134,135,140,141,159,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,122,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-55,-58,-61,-89,]),'GREATEREQUALTHAN':([53,54,55,59,60,61,63,64,65,72,74,75,79,80,81,82,83,84,85,86,87,89,90,103,107,109,110,113,114,115,116,117,120,121,122,123,124,126,127,128,129,130,131,134,135,140,141,159,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,123,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-55,-58,-61,-89,]),'EQUALX2':([53,54,55,59,60,61,63,64,65,72,74,75,79,80,81,82,83,84,85,86,87,89,90,103,107,109,110,113,114,115,116,117,120,121,122,123,124,126,127,128,129,130,131,134,135,140,141,159,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,124,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-55,-58,-61,-89,]),'MULT':([53,54,55,59,60,61,63,64,65,72,74,75,78,79,80,81,82,83,84,85,86,87,89,90,103,107,109,110,113,114,115,116,117,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,140,141,154,155,156,157,158,159,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,113,-89,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-89,-89,-89,-89,-89,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-48,-49,-50,-51,-52,-55,-58,-61,-89,]),'DIV':([53,54,55,59,60,61,63,64,65,72,74,75,78,79,80,81,82,83,84,85,86,87,89,90,103,107,109,110,113,114,115,116,117,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,140,141,154,155,156,157,158,159,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,114,-89,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-89,-89,-89,-89,-89,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-48,-49,-50,-51,-52,-55,-58,-61,-89,]),'MONEY':([53,54,55,59,60,61,63,64,65,72,74,75,78,79,80,81,82,83,84,85,86,87,89,90,103,107,109,110,113,114,115,116,117,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,140,141,154,155,156,157,158,159,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,115,-89,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-89,-89,-89,-89,-89,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-48,-49,-50,-51,-52,-55,-58,-61,-89,]),'EXCLAMATION':([53,54,55,59,60,61,63,64,65,72,74,75,78,79,80,81,82,83,84,85,86,87,89,90,103,107,109,110,113,114,115,116,117,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,140,141,154,155,156,157,158,159,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,116,-89,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-89,-89,-89,-89,-89,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-48,-49,-50,-51,-52,-55,-58,-61,-89,]),'QUESTION':([53,54,55,59,60,61,63,64,65,72,74,75,78,79,80,81,82,83,84,85,86,87,89,90,103,107,109,110,113,114,115,116,117,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,140,141,154,155,156,157,158,159,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,117,-89,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-89,-89,-89,-89,-89,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-48,-49,-50,-51,-52,-55,-58,-61,-89,]),'PLUS':([53,54,55,59,60,61,63,64,65,72,74,75,77,78,79,80,81,82,83,84,85,86,87,89,90,103,107,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,140,141,149,150,151,152,153,154,155,156,157,158,159,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,109,-89,-89,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-40,-89,-89,-89,-89,-89,-46,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-55,-58,-61,-89,]),'MINUS':([53,54,55,59,60,61,63,64,65,72,74,75,77,78,79,80,81,82,83,84,85,86,87,89,90,103,107,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,140,141,149,150,151,152,153,154,155,156,157,158,159,160,161,171,],[-89,-89,-12,-89,-89,-89,-89,-89,-89,-10,-66,-65,110,-89,-89,-89,-89,-60,-89,-62,-63,-64,-67,-65,-66,-89,-11,-89,-89,-40,-89,-89,-89,-89,-89,-46,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,-68,-89,-89,-89,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-55,-58,-61,-89,]),'R_BRACKET':([53,54,55,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,89,90,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,],[-89,-89,-12,-10,107,-13,-14,-15,-89,-89,-89,-89,-89,-60,-62,-63,-64,-67,-65,-66,-11,-36,-89,-89,-39,-40,-89,-89,-89,-89,-89,-46,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,-68,-37,-38,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-55,-58,-61,]),'TO':([53,55,72,77,78,79,80,81,82,84,85,86,87,89,90,103,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,144,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,],[-89,-12,-10,-89,-89,-89,-89,-89,-60,-62,-63,-64,-67,-65,-66,-89,-11,-36,-89,-89,-39,-40,-89,-89,-89,-89,-89,-46,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,-68,171,-37,-38,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-55,-58,-61,]),'DO':([53,55,72,77,78,79,80,81,82,84,85,86,87,89,90,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,143,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,171,176,],[-89,-12,-10,-89,-89,-89,-89,-89,-60,-62,-63,-64,-67,-65,-66,-11,-36,-89,-89,-39,-40,-89,-89,-89,-89,-89,-46,-47,-89,-89,-89,-89,-89,-53,-54,-89,-56,-57,-89,-59,-68,170,-37,-38,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-55,-58,-61,-89,181,]),'CTE_I':([54,59,60,61,63,64,65,83,103,109,110,113,114,115,116,117,120,121,122,123,124,127,130,135,140,141,171,],[74,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'CTE_F':([54,59,60,61,63,64,65,83,103,109,110,113,114,115,116,117,120,121,122,123,124,127,130,135,140,141,171,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'ELSE':([56,174,],[-25,179,]),'CTE_STRING':([63,140,],[99,99,]),'SO':([142,],[169,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'auxVar':([4,6,145,],[5,13,172,]),'var':([4,6,145,],[6,6,6,]),'empty':([4,5,6,10,25,27,28,30,40,49,53,54,59,60,61,63,64,65,71,75,77,78,79,80,81,83,89,103,109,110,113,114,115,116,117,120,121,122,123,124,127,130,135,140,141,145,146,171,174,],[7,11,7,11,31,52,55,31,55,69,55,86,86,86,86,86,86,86,52,55,111,118,125,128,131,86,55,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,7,69,86,180,]),'auxFuncion':([5,10,],[9,19,]),'funcion':([5,10,],[10,10,]),'tipo':([8,12,49,146,],[14,21,68,68,]),'tipoFuncion':([12,],[20,]),'bloque':([18,169,170,172,179,181,],[24,174,175,177,182,183,]),'lista_ids':([23,25,30,48,51,54,59,60,61,62,63,64,65,83,103,109,110,113,114,115,116,117,120,121,122,123,124,127,130,135,138,140,141,171,],[27,39,39,66,71,84,84,84,84,95,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,95,84,84,84,]),'auxEstatuto':([25,30,],[29,57,]),'estatuto':([25,30,],[30,30,]),'asignacion':([25,30,],[32,32,]),'llamada':([25,30,54,59,60,61,63,64,65,83,103,109,110,113,114,115,116,117,120,121,122,123,124,127,130,135,140,141,171,],[33,33,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'retorno':([25,30,],[34,34,]),'lectura':([25,30,],[35,35,]),'escritura':([25,30,],[36,36,]),'decision':([25,30,],[37,37,]),'repeticion':([25,30,],[38,38,]),'condicional':([25,30,],[45,45,]),'nocondicional':([25,30,],[46,46,]),'auxLista_idsVar':([27,71,],[50,106,]),'casilla':([28,40,53,75,89,],[53,53,72,53,53,]),'auxParametro':([49,146,],[67,173,]),'casillaVar':([54,],[73,]),'exp':([54,59,60,61,63,64,65,83,103,109,110,135,140,141,171,],[76,88,92,93,100,101,102,132,144,147,148,92,100,100,176,]),'t':([54,59,60,61,63,64,65,83,103,109,110,113,114,115,116,117,135,140,141,171,],[77,77,77,77,77,77,77,77,77,77,77,149,150,151,152,153,77,77,77,77,]),'f':([54,59,60,61,63,64,65,83,103,109,110,113,114,115,116,117,120,121,122,123,124,135,140,141,171,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,154,155,156,157,158,78,78,78,78,]),'m':([54,59,60,61,63,64,65,83,103,109,110,113,114,115,116,117,120,121,122,123,124,127,135,140,141,171,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,159,79,79,79,79,]),'x':([54,59,60,61,63,64,65,83,103,109,110,113,114,115,116,117,120,121,122,123,124,127,135,140,141,171,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'z':([54,59,60,61,63,64,65,83,103,109,110,113,114,115,116,117,120,121,122,123,124,127,130,135,140,141,171,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,160,81,81,81,81,]),'var_cte':([54,59,60,61,63,64,65,83,103,109,110,113,114,115,116,117,120,121,122,123,124,127,130,135,140,141,171,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'auxLlamada':([60,135,],[91,162,]),'auxLectura':([62,138,],[94,165,]),'auxEscritura':([63,140,],[96,167,]),'auxString':([63,140,],[97,97,]),'auxExpEscritura':([63,140,141,],[98,98,168,]),'auxExp':([77,],[108,]),'auxT':([78,],[112,]),'auxF':([79,],[119,]),'auxM':([80,],[126,]),'auxX':([81,],[129,]),'auxDecision':([174,],[178,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID COLON auxVar auxFuncion MAIN bloque','program',7,'p_program','patito--.py',117),
  ('auxVar -> var auxVar','auxVar',2,'p_auxVar','patito--.py',122),
  ('auxVar -> empty','auxVar',1,'p_auxVar','patito--.py',123),
  ('var -> VAR tipo COLON lista_ids auxLista_idsVar SEMICOLON','var',6,'p_var','patito--.py',128),
  ('tipo -> INT','tipo',1,'p_tipo','patito--.py',133),
  ('tipo -> FLOAT','tipo',1,'p_tipo','patito--.py',134),
  ('tipo -> CHAR','tipo',1,'p_tipo','patito--.py',135),
  ('auxLista_idsVar -> COMA lista_ids auxLista_idsVar','auxLista_idsVar',3,'p_auxLista_idsVar','patito--.py',140),
  ('auxLista_idsVar -> empty','auxLista_idsVar',1,'p_auxLista_idsVar','patito--.py',141),
  ('lista_ids -> ID casilla casilla','lista_ids',3,'p_lista_ids','patito--.py',146),
  ('casilla -> L_BRACKET casillaVar R_BRACKET','casilla',3,'p_casilla','patito--.py',151),
  ('casilla -> empty','casilla',1,'p_casilla','patito--.py',152),
  ('casillaVar -> CTE_I','casillaVar',1,'p_casillaVar','patito--.py',157),
  ('casillaVar -> ID','casillaVar',1,'p_casillaVar','patito--.py',158),
  ('casillaVar -> exp','casillaVar',1,'p_casillaVar','patito--.py',159),
  ('auxFuncion -> funcion auxFuncion','auxFuncion',2,'p_auxFuncion','patito--.py',164),
  ('auxFuncion -> empty','auxFuncion',1,'p_auxFuncion','patito--.py',165),
  ('funcion -> FUNCION tipoFuncion ID L_PARENT auxParametro R_PARENT COLON auxVar bloque','funcion',9,'p_funcion','patito--.py',170),
  ('funcion -> empty','funcion',1,'p_funcion','patito--.py',171),
  ('tipoFuncion -> tipo','tipoFuncion',1,'p_tipoFuncion','patito--.py',176),
  ('tipoFuncion -> VOID','tipoFuncion',1,'p_tipoFuncion','patito--.py',177),
  ('auxParametro -> tipo ID','auxParametro',2,'p_auxParametro','patito--.py',182),
  ('auxParametro -> tipo ID COMA auxParametro','auxParametro',4,'p_auxParametro','patito--.py',183),
  ('auxParametro -> empty','auxParametro',1,'p_auxParametro','patito--.py',184),
  ('bloque -> L_KEY auxEstatuto R_KEY','bloque',3,'p_bloque','patito--.py',189),
  ('auxEstatuto -> estatuto auxEstatuto','auxEstatuto',2,'p_auxEstatuto','patito--.py',194),
  ('auxEstatuto -> empty','auxEstatuto',1,'p_auxEstatuto','patito--.py',195),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','patito--.py',200),
  ('estatuto -> llamada SEMICOLON','estatuto',2,'p_estatuto','patito--.py',201),
  ('estatuto -> retorno','estatuto',1,'p_estatuto','patito--.py',202),
  ('estatuto -> lectura','estatuto',1,'p_estatuto','patito--.py',203),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','patito--.py',204),
  ('estatuto -> decision','estatuto',1,'p_estatuto','patito--.py',205),
  ('estatuto -> repeticion','estatuto',1,'p_estatuto','patito--.py',206),
  ('asignacion -> lista_ids EQUAL exp SEMICOLON','asignacion',4,'p_asignacion','patito--.py',211),
  ('exp -> t auxExp','exp',2,'p_exp','patito--.py',216),
  ('auxExp -> PLUS exp','auxExp',2,'p_auxExp','patito--.py',221),
  ('auxExp -> MINUS exp','auxExp',2,'p_auxExp','patito--.py',222),
  ('auxExp -> empty','auxExp',1,'p_auxExp','patito--.py',223),
  ('t -> f auxT','t',2,'p_t','patito--.py',228),
  ('auxT -> MULT t','auxT',2,'p_auxT','patito--.py',233),
  ('auxT -> DIV t','auxT',2,'p_auxT','patito--.py',234),
  ('auxT -> MONEY t','auxT',2,'p_auxT','patito--.py',235),
  ('auxT -> EXCLAMATION t','auxT',2,'p_auxT','patito--.py',236),
  ('auxT -> QUESTION t','auxT',2,'p_auxT','patito--.py',237),
  ('auxT -> empty','auxT',1,'p_auxT','patito--.py',238),
  ('f -> m auxF','f',2,'p_f','patito--.py',243),
  ('auxF -> LESSTHAN f','auxF',2,'p_auxF','patito--.py',248),
  ('auxF -> GREATERTHAN f','auxF',2,'p_auxF','patito--.py',249),
  ('auxF -> LESSEQUALTHAN f','auxF',2,'p_auxF','patito--.py',250),
  ('auxF -> GREATEREQUALTHAN f','auxF',2,'p_auxF','patito--.py',251),
  ('auxF -> EQUALX2 f','auxF',2,'p_auxF','patito--.py',252),
  ('auxF -> empty','auxF',1,'p_auxF','patito--.py',253),
  ('m -> x auxM','m',2,'p_m','patito--.py',258),
  ('auxM -> OR m','auxM',2,'p_auxM','patito--.py',263),
  ('auxM -> empty','auxM',1,'p_auxM','patito--.py',264),
  ('x -> z auxX','x',2,'p_x','patito--.py',269),
  ('auxX -> AND z','auxX',2,'p_auxX','patito--.py',274),
  ('auxX -> empty','auxX',1,'p_auxX','patito--.py',275),
  ('z -> var_cte','z',1,'p_z','patito--.py',280),
  ('z -> L_PARENT exp R_PARENT','z',3,'p_z','patito--.py',281),
  ('z -> lista_ids','z',1,'p_z','patito--.py',282),
  ('z -> llamada','z',1,'p_z','patito--.py',283),
  ('z -> empty','z',1,'p_z','patito--.py',284),
  ('var_cte -> ID','var_cte',1,'p_var_cte','patito--.py',289),
  ('var_cte -> CTE_I','var_cte',1,'p_var_cte','patito--.py',290),
  ('var_cte -> CTE_F','var_cte',1,'p_var_cte','patito--.py',291),
  ('llamada -> ID L_PARENT auxLlamada R_PARENT','llamada',4,'p_llamada','patito--.py',296),
  ('auxLlamada -> exp','auxLlamada',1,'p_auxLlamada','patito--.py',301),
  ('auxLlamada -> exp COMA auxLlamada','auxLlamada',3,'p_auxLlamada','patito--.py',302),
  ('retorno -> RETURN L_PARENT exp R_PARENT SEMICOLON','retorno',5,'p_retorno','patito--.py',307),
  ('lectura -> READ L_PARENT auxLectura R_PARENT SEMICOLON','lectura',5,'p_lectura','patito--.py',312),
  ('auxLectura -> lista_ids','auxLectura',1,'p_auxLectura','patito--.py',317),
  ('auxLectura -> lista_ids COMA auxLectura','auxLectura',3,'p_auxLectura','patito--.py',318),
  ('escritura -> WRITE L_PARENT auxEscritura R_PARENT SEMICOLON','escritura',5,'p_escritura','patito--.py',323),
  ('auxEscritura -> auxString','auxEscritura',1,'p_auxEscritura','patito--.py',328),
  ('auxEscritura -> auxExpEscritura','auxEscritura',1,'p_auxEscritura','patito--.py',329),
  ('auxString -> CTE_STRING','auxString',1,'p_auxString','patito--.py',334),
  ('auxString -> CTE_STRING COMA auxEscritura','auxString',3,'p_auxString','patito--.py',335),
  ('auxExpEscritura -> exp','auxExpEscritura',1,'p_auxExpEscritura','patito--.py',340),
  ('auxExpEscritura -> exp COMA auxExpEscritura','auxExpEscritura',3,'p_auxExpEscritura','patito--.py',341),
  ('decision -> IF L_PARENT exp R_PARENT SO bloque auxDecision','decision',7,'p_decision','patito--.py',346),
  ('auxDecision -> ELSE bloque','auxDecision',2,'p_auxDecision','patito--.py',351),
  ('auxDecision -> empty','auxDecision',1,'p_auxDecision','patito--.py',352),
  ('repeticion -> condicional','repeticion',1,'p_repeticion','patito--.py',357),
  ('repeticion -> nocondicional','repeticion',1,'p_repeticion','patito--.py',358),
  ('condicional -> WHILE L_PARENT exp R_PARENT DO bloque','condicional',6,'p_condicional','patito--.py',363),
  ('nocondicional -> FROM lista_ids EQUAL exp TO exp DO bloque','nocondicional',8,'p_nocondicional','patito--.py',368),
  ('empty -> <empty>','empty',0,'p_empty','patito--.py',373),
]
